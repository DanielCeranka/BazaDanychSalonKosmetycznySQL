DROP DATABASE IF EXISTS salon_kosmetyczny;
CREATE DATABASE salon_kosmetyczny;
USE salon_kosmetyczny;

CREATE TABLE Klienci (
    klient_ID INT(20) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    imię VARCHAR(50) NOT NULL,
    nazwisko VARCHAR(50) NOT NULL,
    email VARCHAR(50),
    telefon VARCHAR(9) NOT NULL
);

CREATE TABLE Pracownicy (
    pracownik_ID INT(20) AUTO_INCREMENT NOT NULL PRIMARY KEY,
    imię VARCHAR(50) NOT NULL,
    nazwisko VARCHAR(50) NOT NULL,
    specjalizacja VARCHAR(100),
    telefon VARCHAR(9) NOT NULL
);

CREATE TABLE Usługi (
    usługa_ID INT(20) AUTO_INCREMENT NOT NULL PRIMARY KEY,
    nazwa VARCHAR(100) NOT NULL,
    opis TEXT,
    cena DECIMAL(6, 2),
    czas_trwania INT(3)  -- czas trwania w minutach
);

CREATE TABLE Rezerwacje (
    rezerwacja_ID INT(20) AUTO_INCREMENT NOT NULL PRIMARY KEY,
    klient_ID INT(20) NOT NULL,
    pracownik_ID INT(20) NOT NULL,
    usługa_ID INT(20) NOT NULL,
    data DATE,
    godzina TIME,
    status VARCHAR(50),
    FOREIGN KEY (klient_ID) REFERENCES Klienci(klient_ID),
    FOREIGN KEY (pracownik_ID) REFERENCES Pracownicy(pracownik_ID),
    FOREIGN KEY (usługa_ID) REFERENCES Usługi(usługa_ID)
);

CREATE TABLE Logi (
    log_ID INT(6) AUTO_INCREMENT NOT NULL PRIMARY KEY,
    operacja VARCHAR(50),
    czas DATETIME
);


INSERT INTO Klienci (imię, nazwisko, email, telefon) VALUES
('Anna', 'Kowalska', 'anna@example.com', '123456789'),
('Jan', 'Nowak', 'nowak@example.com', '987654321'),
('Marta', 'Wiśniewska', 'marta.wisniewska4@example.com', '564738291'),
('Krzysztof', 'Kowalczyk', 'krzysztof.kowalczyk@example.com', '123987654'),
('Agnieszka', 'Zielińska', 'agnieszkaa@example.com', '321456987'),
('Barbara', 'Wójcik', 'barbara.wojcik@example.com', '456789123'),
('Tomasz', 'Lewandowski', 'lewandowski@example.com', '987123654'),
('Piotr', 'Kamiński', 'piotr.kaminski12@example.com', '321654987'),
('Magdalena', 'Zając', 'magdalena.zajac@example.com', '654987321'),
('Paweł', 'Król', 'pawel@example.com', '789123456'),
('Natalia', 'Piotrowska', 'natalia.piotrowska@example.com', '654321789'),
('Łukasz', 'Wesołowski', 'wesolowski@example.com', '789456123'),
('Monika', 'Kaczmarek', 'monika.kaczmarek@example.com', '987654321'),
('Rafał', 'Kozłowski', 'rafal31@example.com', '654789123'),
('Izabela', 'Ostrowska', 'ostrowska1@example.com', '321987654');

INSERT INTO Pracownicy (imię, nazwisko, specjalizacja, telefon) VALUES
('Piotr', 'Wiśniewski', 'Fryzjer', '555123123'),
('Ewa', 'Szymańska', 'Kosmetolog', '555321321'),
('Paweł', 'Dąbrowski', 'Masażysta', '555987987'),
('Zofia', 'Kwiatkowska', 'Manikiurzystka', '555654654'),
('Tomasz', 'Mazur', 'Stylista', '555789789'),
('Michał', 'Rutkowski', 'Stylista', '555456456'),
('Anna', 'Górska', 'Kosmetolog', '555789456');

INSERT INTO Usługi (nazwa, opis, cena, czas_trwania) VALUES
('Strzyżenie', 'Profesjonalne strzyżenie włosów', 50.99, 30),
('Koloryzacja', 'Farbowanie włosów', 120.00, 90),
('Manicure', 'Pełny manicure', 45.00, 60),
('Masaż relaksacyjny', 'Masaż ciała', 100.00, 60),
('Makijaż', 'Profesjonalny makijaż', 80.00, 45),
('Pedicure', 'Pełny pedicure', 71.47, 60),
('Strzyżenie męskie', 'Strzyżenie dla mężczyzn', 45.11, 30);

INSERT INTO Rezerwacje (klient_ID, pracownik_ID, usługa_ID, data, godzina, status) VALUES
(1, 1, 1, '2024-05-20', '10:00:00', 'Zarezerwowana'),
(2, 2, 2, '2024-05-21', '12:45:00', 'Zarezerwowana'),
(3, 3, 3, '2024-05-22', '14:00:00', 'Zarezerwowana'),
(4, 4, 4, '2024-05-23', '13:00:00', 'Zarezerwowana'),
(5, 5, 5, '2024-06-24', '18:00:00', 'Zarezerwowana'),
(6, 1, 1, '2024-05-25', '09:00:00', 'Zarezerwowana'),
(1, 2, 2, '2024-06-26', '11:40:00', 'Zarezerwowana'),
(8, 3, 3, '2024-05-27', '13:00:00', 'Zarezerwowana'),
(9, 1, 1, '2024-05-28', '15:00:00', 'Zarezerwowana'),
(10, 2, 2, '2024-05-29', '17:00:00', 'Zarezerwowana'),
(3, 6, 6, '2024-05-30', '10:05:00', 'Zarezerwowana'),
(3, 7, 7, '2024-05-31', '12:00:00', 'Zarezerwowana'),
(13, 1, 1, '2024-06-01', '14:35:00', 'Zarezerwowana'),
(14, 2, 2, '2024-06-02', '16:00:00', 'Zarezerwowana'),
(15, 3, 3, '2024-06-03', '18:00:00', 'Zarezerwowana');

-- Tworzenie indeksów

CREATE INDEX idx_data ON Rezerwacje(data);
CREATE INDEX idx_nazwisko ON Klienci(nazwisko);
CREATE INDEX idx_pracownik_data ON Rezerwacje(pracownik_ID, data);


-- Triggery dla tabeli Klienci

DELIMITER //

CREATE TRIGGER before_klienci_insert
BEFORE INSERT ON Klienci
FOR EACH ROW
BEGIN
    -- Sprawdzenie, czy email jest poprawny
    IF NEW.email NOT REGEXP '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$' THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Niepoprawny format adresu email';
    END IF;

    -- Logowanie operacji walidacji
    INSERT INTO Logi (operacja, czas)
    VALUES (CONCAT('VALIDATE Klienci: email=', NEW.email), NOW());
END //

DELIMITER ;


DELIMITER //

CREATE TRIGGER before_klienci_update
BEFORE UPDATE ON Klienci
FOR EACH ROW
BEGIN
    INSERT INTO Logi (operacja, czas)
    VALUES (CONCAT('BEFORE UPDATE Klienci: id=', OLD.klient_ID, ' imię=', OLD.imię, ' nazwisko=', OLD.nazwisko), NOW());
END //

CREATE TRIGGER after_klienci_update
AFTER UPDATE ON Klienci
FOR EACH ROW
BEGIN
    INSERT INTO Logi (operacja, czas)
    VALUES (CONCAT('AFTER UPDATE Klienci: id=', NEW.klient_ID, ' imię=', NEW.imię, ' nazwisko=', NEW.nazwisko), NOW());
END //

CREATE TRIGGER after_klienci_delete
AFTER DELETE ON Klienci
FOR EACH ROW
BEGIN
    INSERT INTO Logi (operacja, czas)
    VALUES (CONCAT('DELETE Klienci: id=', OLD.klient_ID, ' imię=', OLD.imię, ' nazwisko=', OLD.nazwisko), NOW());
END //

DELIMITER ;

-- Triggery dla tabeli Pracownicy

DELIMITER //

CREATE TRIGGER before_pracownicy_insert
BEFORE INSERT ON Pracownicy
FOR EACH ROW
BEGIN
    INSERT INTO Logi (operacja, czas)
    VALUES (CONCAT('BEFORE INSERT Pracownicy: imię=', NEW.imię, ' nazwisko=', NEW.nazwisko), NOW());
END //

CREATE TRIGGER after_pracownicy_insert
AFTER INSERT ON Pracownicy
FOR EACH ROW
BEGIN
    INSERT INTO Logi (operacja, czas)
    VALUES (CONCAT('AFTER INSERT Pracownicy: id=', NEW.pracownik_ID, ' imię=', NEW.imię, ' nazwisko=', NEW.nazwisko), NOW());
END //

CREATE TRIGGER before_pracownicy_update
BEFORE UPDATE ON Pracownicy
FOR EACH ROW
BEGIN
    INSERT INTO Logi (operacja, czas)
    VALUES (CONCAT('BEFORE UPDATE Pracownicy: id=', OLD.pracownik_ID, ' imię=', OLD.imię, ' nazwisko=', OLD.nazwisko), NOW());
END //

CREATE TRIGGER after_pracownicy_update
AFTER UPDATE ON Pracownicy
FOR EACH ROW
BEGIN
    INSERT INTO Logi (operacja, czas)
    VALUES (CONCAT('AFTER UPDATE Pracownicy: id=', NEW.pracownik_ID, ' imię=', NEW.imię, ' nazwisko=', NEW.nazwisko), NOW());
END //

CREATE TRIGGER after_pracownicy_delete
AFTER DELETE ON Pracownicy
FOR EACH ROW
BEGIN
    INSERT INTO Logi (operacja, czas)
    VALUES (CONCAT('DELETE Pracownicy: id=', OLD.pracownik_ID, ' imię=', OLD.imię, ' nazwisko=', OLD.nazwisko), NOW());
END //

DELIMITER ;

-- Triggery dla tabeli Usługi

DELIMITER //

CREATE TRIGGER before_uslugi_insert
BEFORE INSERT ON Usługi
FOR EACH ROW
BEGIN
    INSERT INTO Logi (operacja, czas)
    VALUES (CONCAT('BEFORE INSERT Usługi: nazwa=', NEW.nazwa), NOW());
END //

CREATE TRIGGER after_uslugi_insert
AFTER INSERT ON Usługi
FOR EACH ROW
BEGIN
    INSERT INTO Logi (operacja, czas)
    VALUES (CONCAT('AFTER INSERT Usługi: id=', NEW.usługa_ID, ' nazwa=', NEW.nazwa), NOW());
END //

CREATE TRIGGER before_uslugi_update
BEFORE UPDATE ON Usługi
FOR EACH ROW
BEGIN
    INSERT INTO Logi (operacja, czas)
    VALUES (CONCAT('BEFORE UPDATE Usługi: id=', OLD.usługa_ID, ' nazwa=', OLD.nazwa), NOW());
END //

CREATE TRIGGER after_uslugi_update
AFTER UPDATE ON Usługi
FOR EACH ROW
BEGIN
    INSERT INTO Logi (operacja, czas)
    VALUES (CONCAT('AFTER UPDATE Usługi: id=', NEW.usługa_ID, ' nazwa=', NEW.nazwa), NOW());
END //

CREATE TRIGGER after_uslugi_delete
AFTER DELETE ON Usługi
FOR EACH ROW
BEGIN
    INSERT INTO Logi (operacja, czas)
    VALUES (CONCAT('DELETE Usługi: id=', OLD.usługa_ID, ' nazwa=', OLD.nazwa), NOW());
END //

DELIMITER ;

-- Triggery dla tabeli Rezerwacje

DELIMITER //

CREATE TRIGGER before_rezerwacje_update
BEFORE UPDATE ON Rezerwacje
FOR EACH ROW
BEGIN
    INSERT INTO Logi (operacja, czas)
    VALUES (CONCAT('BEFORE UPDATE Rezerwacje: id=', OLD.rezerwacja_ID, ' klient_id=', OLD.klient_ID, ' pracownik_id=', OLD.pracownik_ID, ' usługa_id=', OLD.usługa_ID, ' data=', OLD.data, ' godzina=', OLD.godzina), NOW());
END //

CREATE TRIGGER after_rezerwacje_update
AFTER UPDATE ON Rezerwacje
FOR EACH ROW
BEGIN
    INSERT INTO Logi (operacja, czas)
    VALUES (CONCAT('AFTER UPDATE Rezerwacje: id=', NEW.rezerwacja_ID, ' klient_id=', NEW.klient_ID, ' pracownik_id=', NEW.pracownik_ID, ' usługa_id=', NEW.usługa_ID, ' data=', NEW.data, ' godzina=', NEW.godzina), NOW());
END //

DELIMITER ;

DELIMITER //

CREATE TRIGGER after_rezerwacje_insert
AFTER INSERT ON Rezerwacje
FOR EACH ROW
BEGIN
    INSERT INTO Logi (operacja, czas)
    VALUES ('Dodano rekord do tabeli rezerwacje', NOW());
END //

DELIMITER ;

DELIMITER //

CREATE TRIGGER after_rezerwacje_delete
AFTER DELETE ON Rezerwacje
FOR EACH ROW
BEGIN
    INSERT INTO Logi (operacja, czas)
    VALUES ('Usunięto rekord z tabeli rezerwacje', NOW());
END //

DELIMITER ;



-- Tworzenie procedur

DELIMITER //

CREATE PROCEDURE dodaj_klienta(
    IN p_imie VARCHAR(50),
    IN p_nazwisko VARCHAR(50),
    IN p_email VARCHAR(100),
    IN p_telefon VARCHAR(20)
)
BEGIN
    INSERT INTO Klienci (imię, nazwisko, email, telefon)
    VALUES (p_imie, p_nazwisko, p_email, p_telefon);
END //

DELIMITER ;

DELIMITER //

CREATE PROCEDURE wykonaj_rezerwacje(
    IN p_klient_ID INT,
    IN p_pracownik_ID INT,
    IN p_usluga_ID INT,
    IN p_data DATE,
    IN p_godzina TIME
)
BEGIN
    INSERT INTO Rezerwacje (klient_ID, pracownik_ID, usługa_ID, data, godzina, status)
    VALUES (p_klient_ID, p_pracownik_ID, p_usluga_ID, p_data, p_godzina, 'Zarezerwowana');
END //

DELIMITER ;

DELIMITER //


DELIMITER ;

DELIMITER //
CREATE PROCEDURE najczesciej_rezerwowana_usluga()
BEGIN
    SELECT u.nazwa, COUNT(r.rezerwacja_ID) AS liczba_rezerwacji
    FROM Usługi u
    JOIN Rezerwacje r ON u.usługa_ID = r.usługa_ID
    GROUP BY u.nazwa
    ORDER BY liczba_rezerwacji DESC
    LIMIT 1;
END//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE ilosc_pracownikow()
BEGIN
    SELECT COUNT(*) AS liczba_pracownikow FROM Pracownicy;
END//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE najwiecej_wydal_klient()
BEGIN
    SELECT k.imię, k.nazwisko, SUM(u.cena) AS wydane_pieniadze
    FROM Klienci k
    JOIN Rezerwacje r ON k.klient_ID = r.klient_ID
    JOIN Usługi u ON r.usługa_ID = u.usługa_ID
    GROUP BY k.imię, k.nazwisko
    ORDER BY wydane_pieniadze DESC
    LIMIT 1;
END//
DELIMITER ;




